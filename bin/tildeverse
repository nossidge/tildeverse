#!/usr/bin/env ruby

################################################################################
# Just calls the main 'tildeverse.rb' file.
################################################################################

require_relative '../lib/tildeverse'

################################################################################

obj_json = Tildeverse::Config.output_tildeverse

help_info = "Usage: tildeverse <command> [subcommand]

$ tildeverse scrape
  Scrape the user list of each box, and generate the JSON files

$ tildeverse fetch
  Fetch data from tilde.town/~nossidge/tildeverse/tildeverse.json

$ tildeverse patch
  Run this after you have done manual user tagging in the input JSON
  It will update the output JSON without doing the full site-scrape

$ tildeverse new
  See if there have been any additions by ~pfhawkins

$ tildeverse json ['pretty']
  Write the JSON file to standard out
  'pretty' subcommand adds new lines

$ tildeverse sites|boxes|servers
  List all the sites in the Tildeverse

$ tildeverse [site name] ['json']
  List all users for the specified Tildebox
  'json' subcommand outputs as JSON
"

# Use the arguments to decide which function to perform.
case ARGV[0]
when nil
  puts help_info
when 'scrape'
  Tildeverse.scrape
when 'fetch'
  Tildeverse.fetch
when 'patch'
  Tildeverse.patch
when 'new'
  Tildeverse::PFHawkins.new.puts_if_new
when 'json'
  if ARGV[1] == 'pretty'
    puts JSON.pretty_generate(obj_json)
  else
    puts JSON(obj_json)
  end
when 'sites', 'boxes', 'servers'
  puts obj_json['sites'].keys
else
  user_hash = obj_json.dig('sites', ARGV[0], 'users')
  if user_hash
    puts ARGV[1] == 'json' ? user_hash : user_hash.keys
  end
end

################################################################################
