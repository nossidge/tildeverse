#!/usr/bin/env ruby

require_relative '../lib/tildeverse'

##
# Define the commands that are possible through the CLI
#
module TildeverseBin
  class << self
    ##
    # Use the arguments to decide which function to perform
    #
    def run(argv)
      case argv[0]
      when nil
        tildeverse_help
      when 'scrape'
        tildeverse_scrape
      when 'fetch'
        tildeverse_fetch
      when 'patch'
        tildeverse_patch
      when 'new'
        tildeverse_new
      when 'json'
        tildeverse_json argv[1]
      when 's', 'b', 'sites', 'boxes', 'servers'
        tildeverse_sites
      when 'u', 'user', 'users'
        tildeverse_user argv[1]
      else
        tildeverse_sitename argv[0], argv[1]
      end
    end

    ##
    # $ tildeverse
    #
    # Display help info by default
    #
    def tildeverse_help
      puts <<-HELP.gsub(/^ {8}/, '')
          Usage: tildeverse <command> [subcommand]

        $ tildeverse scrape
          Scrape the user list of each box, and generate the JSON files

        $ tildeverse fetch
          Fetch data from tilde.town/~nossidge/tildeverse/tildeverse.json

        $ tildeverse patch
          Run this after you have done manual user tagging in the input JSON
          It will update the output JSON without doing the full site-scrape

        $ tildeverse new
          See if there have been any additions by ~pfhawkins

        $ tildeverse json ['pretty']
          Write the JSON file to standard out
          'pretty' subcommand adds new lines

        $ tildeverse sites|boxes|servers
          List all online sites in the Tildeverse

        $ tildeverse [site name] ['json']
          List all users for the specified Tildebox
          'json' subcommand outputs as JSON

        $ tildeverse user|users [regex]
          List all the users by URL
          'regex' subcommand filters by regex
      HELP
    end

    ##
    # $ tildeverse scrape
    #
    # Scrape the user list of each box, and generate the JSON files
    #
    def tildeverse_scrape
      Tildeverse.scrape
    end

    ##
    # $ tildeverse fetch
    #
    # Fetch data from tilde.town/~nossidge/tildeverse/tildeverse.json
    #
    def tildeverse_fetch
      Tildeverse.fetch
    end

    ##
    # $ tildeverse patch
    #
    # Run this after you have done manual user tagging in the input JSON
    # It will update the output JSON without doing the full site-scrape
    #
    def tildeverse_patch
      Tildeverse.patch
    end

    ##
    # $ tildeverse new
    #
    # See if there have been any additions by ~pfhawkins
    #
    def tildeverse_new
      Tildeverse::PFHawkins.new.puts_if_new
    end

    ##
    # $ tildeverse json ['pretty']
    #
    # Write the JSON file to standard out
    # 'pretty' subcommand adds new lines
    #
    def tildeverse_json(argv1)
      obj = Tildeverse.data.serialize_tildeverse_json
      if argv1 == 'pretty'
        puts JSON.pretty_generate(obj)
      else
        puts obj.to_json
      end
    end

    ##
    # $ tildeverse sites|boxes|servers
    #
    # List all online sites in the Tildeverse
    #
    def tildeverse_sites
      puts Tildeverse.sites.select(&:online?).map(&:name)
    end

    ##
    # $ tildeverse [site name] ['json']
    #
    # List all users for the specified Tildebox
    # 'json' subcommand outputs as JSON
    #
    def tildeverse_sitename(argv0, argv1)
      site = Tildeverse.site(argv0)
      return unless site
      if argv1 == 'json'
        puts site.serialize_for_output.to_json
      else
        puts site.users.map(&:name)
      end
    end

    ##
    # $ tildeverse user|users [regex]
    #
    # List all the users by URL
    # 'regex' subcommand filters by regex
    #
    def tildeverse_user(argv1)
      if argv1
        regex = ->(x) { x[Regexp.new(argv1)] }
        puts Tildeverse.users.map(&:url).select(&regex)
      else
        puts Tildeverse.users.map(&:url)
      end
    end
  end
end

##
# Run the damn thing!
#
TildeverseBin.run(ARGV)
